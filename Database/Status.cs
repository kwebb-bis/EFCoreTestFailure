using System;
using System.Collections.Generic;

namespace Database
{
    public class Status : IEquatable<Status>
    {
        // convience getters

        /// <summary>
        /// The new status
        /// </summary>
        public static Status New = new Status { DisplayName = "New", Name = "new" };

        /// <summary>
        /// The in progress status
        /// </summary>
        public static Status InProgress = new Status { DisplayName = "In Progress", Name = "inprogress" };

        /// <summary>
        /// The cancelled status
        /// </summary>
        public static Status Cancelled = new Status { DisplayName = "Cancelled", Name = "cancelled" };

        /// <summary>
        /// The completed status
        /// </summary>
        public static Status Complete = new Status { DisplayName = "Complete", Name = "complete" };

        /// <summary>
        /// The pending cancellation status
        /// </summary>
        public static Status PendingCancellation = new Status { DisplayName = "Pending Cancellation", Name = "pendingcancellation" };

        public string Name { get; set; }
        public string DisplayName { get; set; }

        public ICollection<Task> Tasks { get; set; }

        /// <summary>
        /// Gets all defined statues
        /// </summary>
        /// <returns>A collection of statuses</returns>
        public static IEnumerable<Status> GetAll()
        {
            return new Status[]
            {
                New,
                InProgress,
                Cancelled,
                Complete,
                PendingCancellation
            };
        }

        /// <summary>
        /// Determines whether this instance and another specified Status object have the same value.
        /// </summary>
        /// <param name="obj">The Status to compare to this instance</param>
        /// <returns>true if the value of the value parameter is the same as this instance; otherwise, false.</returns>
        public override bool Equals(object obj)
        {
            if (!(obj is Status status))
                return false;

            return Equals(status);
        }

        /// <summary>
        /// Determines whether this instance and another specified Status object have the same value.
        /// </summary>
        /// <param name="other">The Status to compare to this instance</param>
        /// <returns>true if the value of the value parameter is the same as this instance; otherwise, false.</returns>
        public virtual bool Equals(Status other)
        {
            if (other == null)
                return false;

            bool result = true;

            if (Name == null)
                result &= other.Name == null;
            else
                result &= Name.Equals(other.Name);

            if (DisplayName == null)
                result &= other.DisplayName == null;
            else
                result &= DisplayName.Equals(other.DisplayName);

            // we purposely exclude the Collection of tasks in equality comparision

            return result;
        }

        /// <summary>
        /// Serves as a hash function for the specified object for hashing algorithms and data structures,
        /// such as a hash table.
        /// </summary>
        /// <returns>A hash code for the specified object.</returns>
        public override int GetHashCode()
        {
            // autogenerated
            var hashCode = 420351660;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Name);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(DisplayName);
            return hashCode;
        }
    }
}
